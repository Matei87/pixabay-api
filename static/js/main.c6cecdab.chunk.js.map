{"version":3,"sources":["2111575.svg","components/Header/Header.js","components/SearchButton/SearchButton.js","components/SearchButtonResults/SearchButtonResults.js","components/Details/Details.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","src","logo","alt","Component","SearchButton","state","inputText","onSubmit","this","props","appRequests","type","autoComplete","name","placeholder","SearchButtonResults","imagez","map","image","key","id","webformatURL","tags","user","likes","pathname","Details","location","style","textAlign","views","href","target","rel","Footer","Date","getFullYear","API_KEY","App","images","error","howdy","event","a","preventDefault","serciValue","searchValue","value","URL","fetch","request","json","response","setState","hits","Fragment","exact","path","marginBottom","length","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,qC,gWCwB5BC,G,6KAhBP,OACI,gCACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,kBAAC,IAAD,CAAMC,GAAG,KAAI,yBAAKC,IAAKC,IAAMC,IAAI,aACjC,2D,GARPC,cCcNC,G,kNAhBXC,MAAQ,CACNC,UAAW,I,uDAIT,OACI,oCACI,0BAAMR,UAAU,cAAcS,SAAUC,KAAKC,MAAMC,aAC/C,2BAAOC,KAAK,OAAOC,aAAa,MAAMC,KAAK,cAAcf,UAAU,eAAegB,YAAY,oBAC9F,4BAAQH,KAAK,SAASb,UAAU,2BAAhC,gB,GAVOK,cC0CZY,G,6KAtCD,IACAC,EAAWR,KAAKC,MAAhBO,OAEN,OACI,oCACI,yBAAKlB,UAAU,aACX,yBAAKA,UAAU,OACNkB,EAAOC,KAAK,SAAAC,GACT,OACI,yBAAKC,IAAKD,EAAME,GAAItB,UAAU,uCAC1B,yBAAKA,UAAU,QACX,6BACI,yBAAKA,UAAU,eAAeE,IAAKkB,EAAMG,aAAcnB,IAAKgB,EAAMI,QAEtE,yBAAKxB,UAAU,aACX,uBAAGA,UAAU,aAAb,UAAiCoB,EAAMK,MACvC,6BACI,kCAAQL,EAAME,IACd,8BAAM,uBAAGtB,UAAU,qBAAnB,KAA2CoB,EAAMM,QAErD,kBAAC,IAAD,CAAMzB,GAAI,CACN0B,SAAS,UAAD,OAAYP,EAAME,IAC1Bf,MAAO,CAAEa,MAAOA,KAEhB,4BAAQpB,UAAU,2BAAlB,yB,GAzBlBK,cCqBnBuB,G,6KAvBD,IACAR,EAAUV,KAAKC,MAAMkB,SAAStB,MAA9Ba,MAEN,OACI,oCACI,wBAAIpB,UAAU,gBAAgB8B,MAAO,CAACC,UAAW,WAAjD,gBACA,yBAAK/B,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,yBAAKE,IAAKkB,EAAMG,aAAcnB,IAAKgB,EAAMI,OACzC,yBAAKxB,UAAU,WACX,uCAAaoB,EAAMK,MACnB,2BAAG,uBAAGzB,UAAU,eAAhB,IAAiCoB,EAAMY,OACvC,2BAAI,uBAAGC,KAAMb,EAAMG,aAAcW,OAAO,SAASC,IAAI,uBAAjD,sB,GAdd9B,cCUP+B,G,6KARP,OACI,gCACG,sCAAW,8CAAX,OAAwC,IAAIC,MAAOC,oB,GAJ7CjC,cCQjBkC,G,YAAU,sCAkDCC,E,4MA/CXjC,MAAQ,CACNkC,OAAQ,GACNC,MAAO,8B,EAGXC,M,uCAAQ,WAAOC,GAAP,qBAAAC,EAAA,6DACJD,EAAME,iBACFC,EAAaH,EAAMV,OAAOc,YAAYC,MACtCC,EAHA,uCAGsCX,EAHtC,cAGmDQ,EAHnD,0CAIgBI,MAAMD,GAJtB,cAIAE,EAJA,gBAKiBA,EAAQC,OALzB,OAKAC,EALA,OAMCP,EAGD,EAAKQ,SAAS,CAAEd,OAAQa,EAASE,KAAMd,MAAO,OAF9C,EAAKa,SAAS,CAAEb,MAAO,+BAPvB,4C,6GAgBJ,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAMe,SAAP,KACI,kBAAC,EAAD,MAEsB,OAArB/C,KAAKH,MAAMmC,MAAiB,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,KACvC,kBAAC,EAAD,CAAc/C,YAAaF,KAAKiC,QAChC,wBAAIb,MAAO,CAACC,UAAW,SAAU6B,aAAc,SAAUlD,KAAKH,MAAMmC,QAChC,IAA7BhC,KAAKH,MAAMkC,OAAOoB,OAAe,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,KAC9D,kBAAC,EAAD,CAAc/C,YAAaF,KAAKiC,QAChC,wBAAIb,MAAO,CAACC,UAAW,SAAU6B,aAAc,SAA/C,kBACM,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,KACxB,kBAAC,EAAD,CAAc/C,YAAaF,KAAKiC,QAChC,kBAAC,EAAD,CAAqBzB,OAAQR,KAAKH,MAAMkC,UAG5C,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,aAAaG,UAAWlC,IAC1C,kBAAC,EAAD,a,GAxCNvB,aCDE0D,QACW,cAA7BC,OAAOnC,SAASoC,UAEe,UAA7BD,OAAOnC,SAASoC,UAEhBD,OAAOnC,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.c6cecdab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2111575.033f49ac.svg\";","import React, { Component } from 'react';\r\nimport logo from '../../2111575.svg';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Header.css'\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <Link to=\"/\"><img src={logo} alt=\"pixabay\" /></Link>\r\n                            <p>Pixabay Image Search</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport './SearchButton.css'\r\n\r\nclass SearchButton extends Component {\r\n    state = {\r\n      inputText: ''\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <form className=\"form-inline\" onSubmit={this.props.appRequests} >\r\n                    <input type=\"text\" autoComplete=\"off\" name=\"searchValue\" className=\"form-control\" placeholder=\"Image Search...\" />\r\n                    <button type=\"submit\" className=\"btn btn-outline-primary\" >Submit</button>\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchButton;","import React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './SearchButtonResults.css'\r\n\r\n\r\nclass SearchButtonResults extends Component {\r\n    render() {\r\n        let { imagez } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                            {imagez.map( image => {\r\n                                return (\r\n                                    <div key={image.id} className=\"col-sm-6 col-md-5 col-lg-4 col-xl-3\">\r\n                                        <div className=\"card\">\r\n                                            <div>\r\n                                                <img className=\"card-img-top\" src={image.webformatURL} alt={image.tags} />\r\n                                            </div>\r\n                                            <div className=\"card-body\">\r\n                                                <p className=\"card-text\">Owner: {image.user}</p>\r\n                                                <div>\r\n                                                    <span>#{image.id}</span>\r\n                                                    <span><i className=\"far fa-thumbs-up\" />  {image.likes}</span>\r\n                                                </div>\r\n                                                <Link to={{\r\n                                                    pathname: `/image/${image.id}`,\r\n                                                    state: { image: image }\r\n                                                }}>\r\n                                                    <button className=\"btn btn-outline-primary\">Details</button>\r\n                                                </Link>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchButtonResults;","import React, { Component } from 'react';\r\nimport './Details.css';\r\n\r\nclass Details extends Component {\r\n    render() {\r\n        let { image } = this.props.location.state;\r\n\r\n        return (\r\n            <>\r\n                <h2 className=\"details-title\" style={{textAlign: 'center'}}>Details Page</h2>\r\n                <div className=\"container details-container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <img src={image.webformatURL} alt={image.tags} />\r\n                            <div className=\"credits\">\r\n                                <h4>Credit: {image.user}</h4>\r\n                                <p><i className=\"far fa-eye\" /> {image.views}</p>\r\n                                <p>{<a href={image.webformatURL} target=\"_blank\" rel=\"noopener noreferrer\">Download</a>}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Details;","import React, { Component } from 'react';\r\nimport './Footer.css'\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n               <p>Made by <span>Matei Mircea</span> @ {new Date().getFullYear()}</p>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Header from './components/Header/Header';\nimport SearchButton from \"./components/SearchButton/SearchButton\";\nimport SearchButtonResults from './components/SearchButtonResults/SearchButtonResults';\nimport Details from './components/Details/Details';\nimport Footer from \"./components/Footer/Footer\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nlet API_KEY = '17538426-28a8ebd9211ecf8d22b6cde28';\n\nclass App extends Component {\n    state = {\n      images: [],\n        error: \"Please provide a value !!!\"\n    };\n\n    howdy = async (event) => {\n        event.preventDefault();\n        let serciValue = event.target.searchValue.value;\n        let URL = `https://pixabay.com/api/?key=${API_KEY}&q=${serciValue}&image_type=photo&pretty=true`;\n        let request = await fetch(URL);\n        let response = await request.json();\n        if (!serciValue) {\n            this.setState({ error: \"Please provide a value !!!\" });\n        } else {\n            this.setState({ images: response.hits, error: null });\n        }\n\n    };\n\n\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <React.Fragment>\n                        <Header />\n\n                        {this.state.error !== null ? <Route exact path=\"/\" >\n                                <SearchButton appRequests={this.howdy} />\n                                <h1 style={{textAlign: 'center', marginBottom: '3rem'}}>{this.state.error}</h1>\n                            </Route> : this.state.images.length === 0 ? <Route exact path=\"/\" >\n                            <SearchButton appRequests={this.howdy} />\n                            <h1 style={{textAlign: 'center', marginBottom: '3rem'}}>No result !!!</h1>\n                        </Route>: <Route exact path=\"/\" >\n                            <SearchButton appRequests={this.howdy} />\n                            <SearchButtonResults imagez={this.state.images} />\n                        </Route> }\n\n                        <Route exact path=\"/image/:id\" component={Details} />\n                        <Footer />\n                    </React.Fragment>\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}